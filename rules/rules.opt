# Rule: Eliminate jump to next line
pattern:
  jp $1
$1
replacement:
$1

# Rule: Eliminate register reload
pattern:
  ld $1,$2
  ld $2,$1
replacement:
  ld $1,$2

# Rule: Optimize increment byte by 1
pattern:
  call ccsxt
  push hl
  ld hl,1
  pop de
  add hl,de
  ld a,l
replacement:
  inc a

# Rule: Optimize decrement byte by 1
pattern:
  call ccsxt
  push hl
  ld hl,1
  pop de
  ex de,hl
  xor a
  sbc hl,de
  ld a,l
replacement:
  dec a

# Rule: Optimize byte addition
pattern:
  call ccsxt
  push hl
  ld a,$1
  call ccsxt
  pop de
  add hl,de
  ld a,l
replacement:
  ld b,$1
  add a,b

# Rule: Optimize byte subtraction
pattern:
  call ccsxt
  push hl
  ld a,$1
  call ccsxt
  pop de
  ex de,hl
  xor a
  sbc hl,de
  ld a,l
replacement:
  ld b,$1
  sub a,b

# Rule: Optimize increment int by 1
pattern:
  push hl
  ld hl,1
  pop de
  add hl,de
replacement:
  inc hl

# Rule: Optimize decrement int by 1
pattern:
  push hl
  ld hl,1
  pop de
  ex de,hl
  xor a
  sbc hl,de
replacement:
  dec hl

# Rule: Optimize const addition
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
  add hl,de
constraints:
  (($1 isnumeric) ($2 isnumeric) and)
replacement:
  ld hl,$eval($1 $2 +)

# Rule: Optimize const subtraction
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
  ex de,hl
  xor a
  add hl,de
constraints:
  (($1 isnumeric) ($2 isnumeric) and)
replacement:
  ld hl,$eval($1 $2 -)

# Rule: Optimize const multiplication
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
  call ccmult
constraints:
  (($1 isnumeric) ($2 isnumeric) and)
replacement:
  ld hl,$eval($1 $2 *)

# Rule: Optimize const load
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
replacement:
  ld de,$1
  ld hl,$2

# Rule : Optimize load into DE
pattern:
  push hl
  ld hl,$1
  pop de
  ex de,hl
replacement:  
  ld de,$1

# Rule: Optimize expressions with HL loaded
pattern:
  push hl
  ld hl,$1
  pop de
replacement:
  ld d,h
  ld e,l
  ld hl,$1

# Rule: Optimize expressions with locals
pattern:
  ld h,$1
  ld l,$2
  push hl
  ld h,$3
  ld l,$4
  pop de
replacement:
  ld d,$1
  ld e,$2
  ld h,$3
  ld l,$4

pattern:
  ld h,$1
  ld l,$2
  push hl
  ld hl,$3
  pop de
constraints:
  ($3 isnumeric) ($3 1 <>) and
replacement:
  ld d,$1
  ld e,$2
  ld hl,$3

# Rule: Optimize char variable load
pattern:
  ld a,$1
  call ccsxt
  ld a,l
replacement:
  ld a,$1

# Rule : Global Int array 0 Index
pattern:
  ld hl,0
  add hl,hl
  push hl
  ld hl,$1
  pop de
  add hl,de
replacement:
  ld hl,$1

# Rule : Global Int array const Index
pattern:
  ld hl,$1
  add hl,hl
  push hl
  ld hl,$2
  pop de
  add hl,de
constraints:
  ($1 isnumeric) (($2 isnumeric) ($2 "_" startswith) or) and
replacement:
  ld hl, $2+$eval($1 2 *)


# Rule : Global Char array 0 Index
pattern:
  ld hl,0
  push hl
  ld hl,$1
  pop de
  add hl,de
replacement:
  ld hl,$1

# Rule : Global Char array const Index
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
  add hl,de
constraints:
  ($1 isnumeric) (($2 isnumeric) ($2 "_" startswith) or) and
replacement:
  ld hl, $2+$1

# Rule : Global Char array variable Index
pattern:
  ld hl,$1
  push hl
  ld hl,$2
  pop de
  add hl,de
replacement:
  ld de,$1
  ld hl,$2
  add hl,de

# Rule : Global Char array complex Index
pattern:
  push hl
  ld hl,$1
  pop de
  add hl,de
replacement:
  ld de,$1
  add hl,de

# Rule : HL to DE
pattern:
  ld h,$1
  ld l,$2
  ld d,h
  ld e,l
replacement:
  ld d,$1
  ld e,$2

# Rule : L to B (from HL)
pattern:
  ld hl,$1
  ld b,l
constraints:
  ($1 isnumeric)
replacement:
  ld b,$1

# Rule : HL to var, var to DE
pattern:
  ld $1,h
  ld $2,l
  ld d,$1
  ld e,$2
replacement:
  ld $1,h
  ld $2,l
  ld d,h
  ld e,l

# Rule : Optimize out port <= 255
pattern:
  ld hl,$1
  ld c,l
  ld b,h
  ld hl,$2
  out (c),l
constraints:
  ($1 isnumeric) ($1 255 <=) and
replacement:
  ld a,$2
  out ($1),a

# Rule : Optimize out port > 255
pattern:
  ld hl,$1
  ld c,l
  ld b,h
  ld hl,$2
  out (c),l
replacement:
  ld bc,$1
  ld a,$2
  out (c),a

# Rule : Optimize nextreg *,*
pattern:
  ld de,$1
  ld hl,$2
  ld bc,9275
  out (c),e
  inc b
  out (c),l
constraints:
  ($1 isnumeric) ($2 isnumeric) and
replacement:
  nreg $1,$2

# Rule : Optimize nextreg *,a
pattern:
  ld de,$1
  ld hl,$2
  ld bc,9275
  out (c),e
  inc b
  out (c),l
constraints:
  ($1 isnumeric)
replacement:
  ld a,$2
  nreg $1,a

# Rule : Optimize nextreg *,a
pattern:
  ld de,$1
  ld hl,$2
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a

# Rule : Optimize nextreg *,a
pattern:
  ld hl,$1
  push hl
  ld a,$2
  call ccsxt
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
constraints:
  ($1 isnumeric)
replacement:
  ld a,$2
  nreg $1,a

# Rule : Optimize nextreg
pattern:
  ld a,$1
  push hl
  ld a,$2
  call ccsxt
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a

# Rule : Optimize nextreg
pattern:
  ld a,$1
  call ccsxt
  push hl
  ld a,$2
  call ccsxt
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a

# Rule : Optimize nextreg
pattern:
  ld a,$1
  call ccsxt
  push hl
  ld hl,$2
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a

# Rule : Optimize nextreg
pattern:
  ld hl,$1
  push hl
  ld a,$2
  call ccsxt
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a

# Rule : Optimize nextreg (locals)
pattern:
  ld hl,$1
  push hl
  ld h,$2
  ld l,$3
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$3
  out(c),a

# Rule : Optimize nextreg (locals)
pattern:
  ld d,$1
  ld e,$2
  ld hl,$3
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$2
  ld bc,9275
  out (c),a
  inc b
  ld a,$3
  out(c),a

# Rule : Optimize nextreg (locals)
pattern:
  ld d,$1
  ld e,$2
  ld h,$3
  ld l,$4
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$2
  ld bc,9275
  out (c),a
  inc b
  ld a,$4
  out(c),a

# Rule : Optimize nextreg (locals+global)
pattern:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$2
  out(c),a
constraints:
  ($1 isnumeric)
replacement:
  ld a,$2
  nreg $1,a

pattern:
  ld h,$1
  ld l,$2
  push hl
  ld hl,$3
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$2
  ld bc,9275
  out (c),a
  inc b
  ld a,$3
  out(c),a

# Rule : Optimize nextreg (locals+global)
pattern:
  ld h,$1
  ld l,$2
  push hl
  ld a,$3
  call ccsxt
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$2
  ld bc,9275
  out (c),a
  inc b
  ld a,$3
  out(c),a

# Rule : Optimize nextreg (locals+global)
pattern:
  ld a,$1
  call ccsxt
  push hl
  ld h,$2
  ld l,$3
  pop de
  ld bc,9275
  out (c),e
  inc b
  out (c),l
replacement:
  ld a,$1
  ld bc,9275
  out (c),a
  inc b
  ld a,$3
  out(c),a